<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <title>The Kinky Play List</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #FF3B5C;
            --secondary: #FF6B8B;
            --surface: #1A1A1A;
            --background: #121212;
            --text-primary: #F5F5F5;
            --text-secondary: #A0A0A0;
            --elevation-1: 0 4px 6px -1px rgba(0, 0, 0, 0.25);
        }

        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            background: var(--background);
            color: var(--text-primary);
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
        }

        .elegant-container {
            max-width: 700px;
            margin: 2rem auto;
            padding: 1.5rem;
            background: var(--surface);
            border-radius: 20px;
            box-shadow: var(--elevation-1);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        h1,
        h2,
        h3 {
            color: var(--primary);
            font-weight: 700;
            margin: 1rem 0;
        }

        h1 {
            font-size: 2rem;
            text-align: center;
        }

        h2 {
            font-size: 1.5rem;
        }

        h3 {
            font-size: 1.25rem;
        }

        p,
        ul {
            margin: 0.75rem 0;
        }

        ul {
            padding-left: 1.5rem;
        }

        li {
            margin: 0.5rem 0;
        }

        .tabs {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin: 1rem 0;
        }

        .tab-button {
            padding: 0.75rem 1.5rem;
            border: 1px solid var(--primary);
            border-radius: 8px;
            background: transparent;
            color: var(--primary);
            cursor: button;
            transition: all 0.2s ease;
            font-weight: 500;
        }

        .tab-button.active {
            background: var(--primary);
            color: white;
        }

        .tab-button:hover {
            background: rgba(255, 59, 92, 0.1);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            padding: 0.3rem 0;
        }

        .item-label {
            flex: 1;
            font-size: 14px;
        }

        .slider {
            -webkit-appearance: none;
            appearance: none;
            width: 160px;
            height: 6px;
            background: linear-gradient(to right, #FF4D4D, #FF914D, #FFD700, #00CC66);
            border-radius: 3px;
            outline: none;
            cursor: pointer;
            transition: opacity 0.2s ease;
        }

        .slider:hover {
            opacity: 0.9;
        }

        .slider:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 16px;
            height: 24px;
            background: var(--thumb-color, #E0E0E0);
            border-radius: 3px;
            border: 0px solid var(--primary);
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
        }

        .slider::-moz-range-thumb {
            width: 16px;
            height: 24px;
            background: var(--thumb-color, #E0E0E0);
            border-radius: 6px;
            border: 2px solid var(--primary);
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
        }

        .slider:hover::-webkit-slider-thumb {
            transform: scale(1.1);
            box-shadow: 0 0 6px rgba(211, 47, 47, 0.5);
        }

        .slider:hover::-moz-range-thumb {
            transform: scale(1.1);
            box-shadow: 0 0 6px rgba(211, 47, 47, 0.5);
        }

        .preference {
            width: 90px;
            text-align: center;
            font-size: 14px;
            font-weight: 6;
        }

        .share-container {
            text-align: center;
            margin-top: 2rem;
        }

        .share-button {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            color: white;
            transition: background 0.2s ease, transform 0.2s ease;
            margin: 0.5rem;
        }

        .share-button:hover {
            transform: scale(1.05);
        }

        .telegram {
            background: #0088CC;
        }

        .telegram:hover {
            background: #33AADD;
        }

        .whatsapp {
            background: #25D366;
        }

        .whatsapp:hover {
            background: #4ADE80;
        }

        .email {
            background: #D32F2F;
        }

        .email:hover {
            background: #E53935;
        }

        .copy-link {
            background: #FFB300;
            color: var(--background);
        }

        .copy-link:hover {
            background: #FFC107;
        }

        .note-section {
            margin-top: 2rem;
        }

        .note-section h2 {
            margin-bottom: 1rem;
        }

        .note-section textarea {
            width: 100%;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            resize: vertical;
            outline: none;
            transition: border-color 0.2s ease;
            box-sizing: border-box;
        }

        .note-section textarea:focus {
            border-color: var(--primary);
            box-shadow: 0 0 8px rgba(255, 59, 92, 0.2);
        }

        @media (max-width: 768px) {
            .slider {
                width: 130px;
            }

            .item-label {
                font-size: 13px;
            }

            .tab-button {
                padding: 0.5rem 1rem;
            }

            .share-button {
                padding: 0.5rem 1rem;
            }
        }
    </style>
</head>

<body>
    <div class="elegant-container">
        <div class="card">
            <h1>The Kinky Play List</h1>
            <p>Use the sliders to express your preferences and consent for each kinky activity:</p>
            <ul>
                <li><strong>Me</strong> Indicates what you enjoy doing</li>
                <li><strong>Partner:</strong> Indicates what you enjoy receiving</li>
            </ul>
            <ul>
                <li><span style="color: #EF5350;">Hard Limit</span> - Absolutely not</li>
                <li><span style="color: #FF914D;">Curious</span> - Willing to explore</li>
                <li><span style="color: #FFCA28;">Moderate</span> - Enjoy moderately</li>
                <li><span style="color: #26A69A;">Oh Yes</span> - Enthusiastic consent</li>
            </ul>
        </div>

        <!-- Safe Words Section -->
        <div class="card">
            <h2>Safe Words</h2>
            <p>Safe words are essential for maintaining consent and communication during BDSM activities:</p>
            <ul>
                <li><span style="color: #26A69A;">Green</span> Everything is okay, continue.</li>
                <li><span style="color: #FFCA28;">Yellow</span> Slow down or check-in.</li>
                <li><span style="color: #EF5350;">Red</span> Stop immediately.</li>
            </ul>
            <p>Make sure both partners agree on safe words before starting.</p>
        </div>

        <!-- Aftercare Section -->
        <div class="card">
            <h2>Aftercare</h2>
            <p>Aftercare ensures both partners feel supported post-scene:</p>
            <ul>
                <li>Water, snacks, or a blanket.</li>
                <li>Cuddling or holding each other.</li>
                <li>Discussing the scene and feelings.</li>
                <li>Taking care of marks or injuries.</li>
            </ul>
            <p>Plan aftercare with your partner beforehand.</p>
        </div>

        <!-- Preferences Section -->
        <div class="card">
            <div class="tabs">
                <button class="tab-button active" onclick="openTab('me')">Me</button>
                <button class="tab-button" onclick="openTab('partner')">Partner</button>
            </div>
            <div id="me" class="tab-content active">
                <div class="sub-section">
                    <h2>Oral, Vaginal, Anal</h2>
                    <div class="item">
                        <span class="item-label">Kissing</span>
                        <input type="range" min="0" max="3" value="0" class="slider" data-key="kissing-me" onchange="updatePreference(this, this.nextElementSibling)">
                        <span class="preference">Hard Limit</span>
                    </div>
                    <div class="item">
                        <span class="item-label">Masturbation</span>
                        <input type="range" min="0" max="3" value="0" class="slider" data-key="masturbation-me" onchange="updatePreference(this, this.nextElementSibling)">
                        <span class="preference">Hard Limit</span>
                    </div>
                    <div class="item">
                        <span class="item-label">Oral (Received)</span>
                        <input type="range" min="0" max="3" value="0" class="slider" data-key="oral-received-me" onchange="updatePreference(this, this.nextElementSibling)">
                        <span class="preference">Hard Limit</span>
                    </div>
                </div>



                <!-- Sharing Buttons for Me Tab -->
                <div class="share-container">
                    <button class="share-button telegram" onclick="shareViaTelegram()">
                        <i class="fab fa-telegram"></i> Telegram
                    </button>
                    <button class="share-button whatsapp" onclick="shareViaWhatsApp()">
                        <i class="fab fa-whatsapp"></i> WhatsApp
                    </button>
                    <button class="share-button email" onclick="shareViaEmail()">
                        <i class="fas fa-envelope"></i> Email
                    </button>
                    <button class="share-button copy-link" onclick="copyUrl()">
                        <i class="fas fa-link"></i> Copy Link
                    </button>
                </div>
            </div>





            <div id="partner" class="tab-content">
                <div class="sub-section">
                 


                    
                    <h2>Oral, Vaginal, Anal</h2>
                    <div class="item">
                        <span class="item-label">Kissing</span>
                        <input type="range" min="0" max="3" value="0" class="slider" data-key="kissing-partner" onchange="updatePreference(this, this.nextElementSibling)">
                        <span class="preference">Hard Limit</span>
                    </div>
                    <div class="item">
                        <span class="item-label">Masturbation</span>
                        <input type="range" min="0" max="3" value="0" class="slider" data-key="masturbation-partner" onchange="updatePreference(this, this.nextElementSibling)">
                        <span class="preference">Hard Limit</span>
                    </div>
                    <div class="item">
                        <span class="item-label">Oral (Received)</span>
                        <input type="range" min="0" max="3" value="0" class="slider" data-key="oral-received-partner" onchange="updatePreference(this, this.nextElementSibling)">
                        <span class="preference">Hard Limit</span>
                    </div>
                </div>
                
                
                
                <!-- Sharing Buttons for Partner Tab -->
                <div class="share-container">
                    <button class="share-button telegram" onclick="shareViaTelegram()">
                        <i class="fab fa-telegram"></i> Telegram
                    </button>
                    <button class="share-button whatsapp" onclick="shareViaWhatsApp()">
                        <i class="fab fa-whatsapp"></i> WhatsApp
                    </button>
                    <button class="share-button email" onclick="shareViaEmail()">
                        <i class="fas fa-envelope"></i> Email
                    </button>
                    <button class="share-button copy-link" onclick="copyUrl()">
                        <i class="fas fa-link"></i> Copy Link
                    </button>
                </div>
            </div>
        </div>

        <!-- Note Section -->
        <div class="note-section">
            <h2>Notes</h2>
            <textarea placeholder="Add any additional notes or comments here..." rows="4"></textarea>
        </div>
    </div>

    <script>
        // Function to interpolate between two colors
        function interpolateColor(color1, color2, factor) {
            const result = color1.slice();
            for (let i = 0; i < 3; i++) {
                result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));
            }
            return result;
        }

        // Function to convert hex to RGB
        function hexToRgb(hex) {
            const bigint = parseInt(hex.slice(1), 16);
            return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
        }

        // Function to calculate the thumb color based on the slider's value
        function getThumbColor(value) {
            const colors = ["#FF4D4D", "#FF914D", "#FFD700", "#00CC66"];
            const index = Math.floor(value);
            const factor = value - index;
            const color1 = hexToRgb(colors[index]);
            const color2 = hexToRgb(colors[index + 1] || colors[index]);
            const interpolatedColor = interpolateColor(color1, color2, factor);
            return `rgb(${interpolatedColor.join(",")})`;
        }

        // Function to update the slider thumb color
        function updateThumbColor(slider) {
            const value = parseFloat(slider.value);
            const thumbColor = getThumbColor(value);
            slider.style.setProperty("--thumb-color", thumbColor);
        }

        // Function to initialize slider thumb colors
        function initializeSliderThumbs() {
            const sliders = document.querySelectorAll(".slider");
            sliders.forEach(slider => {
                updateThumbColor(slider);
                slider.addEventListener("input", () => updateThumbColor(slider));
            });
        }

        // Function to update the preference text and color
        function updatePreference(slider, preferenceSpan) {
            const value = parseInt(slider.value);
            let preference = '';
            let color = '';

            switch (value) {
                case 0:
                    preference = 'Hard Limit';
                    color = '#EF5350';
                    break;
                case 1:
                    preference = 'Curious';
                    color = '#FF914D';
                    break;
                case 2:
                    preference = 'Moderate';
                    color = '#FFCA28';
                    break;
                case 3:
                    preference = 'Oh Yes';
                    color = '#26A69A';
                    break;
            }

            preferenceSpan.textContent = preference;
            preferenceSpan.style.color = color;
        }

        // Function to generate the URL with slider positions
        function generateUrl() {
            const sliders = document.querySelectorAll('.slider');
            const params = new URLSearchParams();
            sliders.forEach(slider => {
                const key = slider.getAttribute('data-key');
                const value = slider.value;
                params.set(key, value);
            });
            return `${window.location.origin}${window.location.pathname}?${params.toString()}`;
        }

        // Function to share via Telegram
        function shareViaTelegram() {
            const url = generateUrl();
            window.open(`https://t.me/share/url?url=${encodeURIComponent(url)}`, '_blank');
        }

        // Function to share via WhatsApp
        function shareViaWhatsApp() {
            const url = generateUrl();
            window.open(`https://wa.me/?text=${encodeURIComponent(url)}`, '_blank');
        }

        // Function to share via Email
        function shareViaEmail() {
            const url = generateUrl();
            window.location.href = `mailto:?body=${encodeURIComponent(url)}`;
        }

        // Function to copy the URL to clipboard
        function copyUrl() {
            const url = generateUrl();
            navigator.clipboard.writeText(url).then(() => {
                alert('URL copied to clipboard!');
            }).catch(() => {
                alert('Failed to copy URL. Please try again.');
            });
        }

        // Function to open tabs
        function openTab(tabName) {
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(tab => tab.classList.remove('active'));
            document.getElementById(tabName).classList.add('active');

            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(button => button.classList.remove('active'));
            document.querySelector(`button[onclick="openTab('${tabName}')"]`).classList.add('active');
        }

        // Function to load slider positions from URL parameters
        function loadSliderPositionsFromUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            const sliders = document.querySelectorAll('.slider');
            sliders.forEach(slider => {
                const key = slider.getAttribute('data-key');
                const value = urlParams.get(key);
                if (value !== null) {
                    slider.value = value;
                    updatePreference(slider, slider.nextElementSibling);
                    updateThumbColor(slider);
                }
            });
        }

        // Initialize slider thumb colors when the page loads
        initializeSliderThumbs();

        // Load slider positions from URL when the page loads
        loadSliderPositionsFromUrl();
    </script>
</body>
 <!-- Footer -->
    <footer style="text-align: center; padding: 1rem; color: var(--text-secondary); font-size: 0.875rem; margin-top: 2rem;">
        Developed with love and care for safe and consensual play by <strong>knottydaddy_</strong> & <strong>wikz</strong>
    </footer>
</html>
